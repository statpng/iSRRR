// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// UpdateB_BMD
Rcpp::List UpdateB_BMD(arma::mat X, arma::mat Y, arma::mat A, arma::mat B, arma::vec pvec, int nrank, int d, arma::mat lam, int maxit, double eps, int threads);
RcppExport SEXP _iSRRR_UpdateB_BMD(SEXP XSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP pvecSEXP, SEXP nrankSEXP, SEXP dSEXP, SEXP lamSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pvec(pvecSEXP);
    Rcpp::traits::input_parameter< int >::type nrank(nrankSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateB_BMD(X, Y, A, B, pvec, nrank, d, lam, maxit, eps, threads));
    return rcpp_result_gen;
END_RCPP
}
// png_quartimax
Rcpp::List png_quartimax(arma::mat X, int maxit, double eps, double al);
RcppExport SEXP _iSRRR_png_quartimax(SEXP XSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP alSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type al(alSEXP);
    rcpp_result_gen = Rcpp::wrap(png_quartimax(X, maxit, eps, al));
    return rcpp_result_gen;
END_RCPP
}
// png_varimax
Rcpp::List png_varimax(arma::mat X, int maxit, double eps, double al);
RcppExport SEXP _iSRRR_png_varimax(SEXP XSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP alSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type al(alSEXP);
    rcpp_result_gen = Rcpp::wrap(png_varimax(X, maxit, eps, al));
    return rcpp_result_gen;
END_RCPP
}
// arcov
NumericMatrix arcov(int p, double rho, int threads, bool display_progress);
RcppExport SEXP _iSRRR_arcov(SEXP pSEXP, SEXP rhoSEXP, SEXP threadsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(arcov(p, rho, threads, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iSRRR_UpdateB_BMD", (DL_FUNC) &_iSRRR_UpdateB_BMD, 11},
    {"_iSRRR_png_quartimax", (DL_FUNC) &_iSRRR_png_quartimax, 4},
    {"_iSRRR_png_varimax", (DL_FUNC) &_iSRRR_png_varimax, 4},
    {"_iSRRR_arcov", (DL_FUNC) &_iSRRR_arcov, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_iSRRR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
